# -*- coding: utf-8 -*-
"""NER_ns_food4_report_confm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fwr1ZBmRiB_8IM3TfRe88MrJDFAhMzhW
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

import tensorflow as tf
print('Tensorflow version:', tf.__version__)
print('GPU detected:', tf.config.list_physical_devices('GPU'))

"""### Load data in Colab"""


df = pd.read_csv("food.csv", encoding="utf-8")
df.head(5)

"""###Split dataset into individual sentences"""

# inserting the sentence indicator
# detect an empty space and increse sentence count 

Sentnum = 1
#d = {'Sentence #':[], 'Word':[], 'Tag':[]}
data = pd.DataFrame(columns=['Sentence #','Word','Tag'])
#print(data)

for ind, row in df.iterrows():
  #print(row['Word'], row['NER'])
 
  if row.notna().any():
    #d2  = {'Sentence #':Sentnum, 'Word':row['Word'], 'Tag':row['NER']}
    dat = [[Sentnum,row['Word'],row['NER']]]
    #print(dat)
    df2 = pd.DataFrame(dat, columns=['Sentence #','Word','Tag'])
    #print(df2)
    data = data.append(df2)  
    #print(data)
  else:
    Sentnum +=1
    #print(Sentnum)

data.head(5)

# Find the number of unique words and unique tags in dataset
# Will use it to encode the sentences

print("Unique words in dataset:", data['Word'].nunique())
print("Unique tags in dataset:", data['Tag'].nunique())

# Make a list of all words and use the set method to have unique entries 
# Add the flag ENDFILL to the end of the word set
# The ENDFILL flag will be used to pad short entences
words = list(set(data["Word"].values))
words.append("ENDFILL")
words_count = len(words)

# Make a list of all tags and use the set method to have unique entries 
tags = list(set(data["Tag"].values))
tags_count = len(tags)

"""### Obtain individual sentences with words and tags"""

# this method retrieves individual sentences
# zip() functions joins tuples together in one big tuple
# lambda funtion returns the variable s
# the groupby() function groups the input data by sentence numbers
# the apply(agg_func) method applies agg_func to grouped sentences
# method get_next loops through the data until all sentencess are processed

class ObtainSentence(object):
    def __init__(self, data):
        self.n_sent = 1
        self.data = data
        self.empty = False
        agg_func = lambda s: [(w, t) for w, t in zip(s["Word"].values.tolist(),
                                                           s["Tag"].values.tolist())]
        self.grouped = self.data.groupby("Sentence #").apply(agg_func)
        self.sentences = [s for s in self.grouped]

get_sentence = ObtainSentence(data)
sentences = get_sentence.sentences

#Check the result by inspecting the first sentence
sentences[0]

#type(sentences)
type(sentences[0][0][0])
sentences[0][0][0]

"""### Create dictionaries for words and tags"""

# We map all unique words into indexes from 1 to words_count
# the same for tags
#words_index = {w: i + 1 for i, w in enumerate(words)} 
words_index = {w: i for i, w in enumerate(words)} 
tags_index = {t: i for i, t in enumerate(tags)}

list(words_index.items())[:5]

tags_index

"""### Make all input sentences the same length with padding"""

#creates an array of sentences lengths and plots it in 50 bin histogram
# this histogram is used to define optimum sentence length
import seaborn as sns
sns.set_style('darkgrid')
plt.hist([len(s) for s in sentences], bins=35, color='red')

plt.title('Histogram of Sentences Lengths') 
plt.xlabel('Sentence length (words)') 
plt.ylabel('Frequency') 
plt.show()

# now we will pad sequences shprter than max_sentence_length
from tensorflow.keras.preprocessing.sequence import pad_sequences

max_sentence_length = 25

X = [[words_index[w[0]] for w in s] for s in sentences] #convert sentences into numeric sequences using word2idx
X = pad_sequences(maxlen=max_sentence_length, sequences=X, padding="post", value=words_index["ENDFILL"]) #keras function padding the sequences

y = [[tags_index[w[1]] for w in s] for s in sentences]  #convert tags into numeric sequences using word2idx
y = pad_sequences(maxlen=max_sentence_length, sequences=y, padding="post", value=tags_index["O"]) #padding the tags sequences

type(X)

type(y)

"""### Split data into the training and test sets"""

# split the data into the training and test sets
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

"""### Define a bidirectional LSTM model"""

from tensorflow.keras import Model, Input
from tensorflow.keras.layers import LSTM, Embedding, Dense
from tensorflow.keras.layers import TimeDistributed, SpatialDropout1D, Bidirectional

input_word = Input(shape=(max_sentence_length,))
model = Embedding(input_dim=words_count, output_dim=50, input_length=max_sentence_length)(input_word)
model = SpatialDropout1D(0.1)(model)
model = Bidirectional(LSTM(units=128, return_sequences=True, recurrent_dropout=0.1))(model)
out = TimeDistributed(Dense(tags_count, activation="softmax"))(model)
model = Model(input_word, out)
model.summary()

"""### Compile the model"""

model.compile(optimizer="adam",
              loss="sparse_categorical_crossentropy",
              metrics=["accuracy"]
              )

"""### Load the Tensorboard"""

# Commented out IPython magic to ensure Python compatibility.
# Load the TensorBoard notebook extension
# %load_ext tensorboard
import datetime

# Clear any logs from previous runs
#--------------------------------!rm -rf ./logs/

#define directory for new Tensorboard logs
log_dir = "logs/fit/" + datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)

"""### Train the model"""

#train the model using .fit method

history = model.fit(
    x=x_train,
    y=y_train,
    validation_data=(x_test,y_test),
    batch_size=32, 
    epochs = 10,
    callbacks=[tensorboard_callback],
    verbose=1
)

# Commented out IPython magic to ensure Python compatibility.
# %tensorboard --logdir logs/fit

"""### Evaluate model performance"""

# Inspect prediction results for a random sentence
i = np.random.randint(0, x_test.shape[0]) 
p = model.predict(np.array([x_test[i]]))
p = np.argmax(p, axis=-1)
y_true = y_test[i]

#print the comparison
print("{:15}{:8}\t {}\n".format("Word", "True_Tag", "Predicted_Tag"))
print("-" *50)
for w, true, predicted in zip(x_test[i], y_true, p[0]):
    print("{:15}{}\t{}".format(words[w], tags[true], tags[predicted]))

model.evaluate(x_test, y_test)

# Calculate accuracy without accounting for padded values:
truetags = []
predictedtags =[]
numsentences = 0
accuracy = 0
for i in range(x_test.shape[0]):
  current_accuracy = 0 
  p = model.predict(np.array([x_test[i]]))
  p = np.argmax(p, axis=-1)
  y_true = y_test[i]
  count = 0
  correct = 0
  for w, true, pred in zip(x_test[i], y_true, p[0]):
    if words[w] != "ENDFILL":
      count +=1
      truetags.append(tags[true])
      predictedtags.append(tags[pred])
      if tags[true] == tags[pred]:
        correct +=1
      
  current_accuracy = correct/count
  accuracy = accuracy + current_accuracy
  numsentences +=1

print('Number of test sentences = ', numsentences)
accuracy = accuracy/numsentences  
print('Accuracy on test set = ', accuracy)
print('Length of true tags  = ', len(truetags))
print('Length of predicted tags = ', len(predictedtags))

"""###Determine other accuracy metrics and F1 score"""

from sklearn import metrics
print(metrics.classification_report(truetags,predictedtags))

len(truetags)

len(predictedtags)

#labels1 = tags_index.keys()
labels1 = ['I-Restaurant_Name', 'B-Location', 'B-Restaurant_Name', 'B-Hours', 'I-Price', 'I-Cuisine', 'I-Amenity', 'I-Location', 'I-Hours', 'B-Price', 'B-Rating', 'B-Amenity', 'I-Rating', 'B-Dish', 'I-Dish', 'B-Cuisine', 'O']

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(truetags,predictedtags, labels = labels1)
cm.shape
cmdf = pd.DataFrame(cm, columns=labels1)
cmdf